import User from "../models/User.js"; 
import bcrypt from 'bcryptjs' 
import Jwt from "jsonwebtoken"; 
//user register 
export const register =async(req,res)=>{ 
try { 
//hashing password 
const salt=bcrypt.genSaltSync(10) 
const 
hash=bcrypt.hashSync(req.body.password,salt) 
const newUser=new User({ 
username:req.body.username, 
email:req.body.email, 
password:hash, 
photo:req.body.photo 
}) 
await newUser.save() 
res.status(200).json({success:true,message:"suc 
cessfully created"}) 
} catch (error) { 
res.status(500).json({success:false,message:"f 
ail to create"}) 
} 
} 
//user login 
// Replace with the correct path to your User model 
export const login = async (req, res) => { 
const email = req.body.email; 
// const password=req.body.password; 
try { 
const user = await User.findOne({ email }); 
// If user doesn't exist 
if (!user) { 
return res.status(404).json({ success: 
false, message: "User not found" }); 
} 
// Check the password using bcrypt.compare 
const checkCorrectPassword = await 
bcrypt.compare(req.body.password, user.password); 
// If password is incorrect 
if (!checkCorrectPassword) { 
return res.status(401).json({ success: 
false, message: "Incorrect email or password" }); 
} 
const { password, role, ...rest } = user._doc; 
// Create JWT token 
const token = Jwt.sign( 
{ id: user._id, role: user.role }, 
process.env.JWT_SECRET_KEY, 
{ expiresIn: '15d' } 
); 
// Set token in the browser cookie and send 
response to the client 
res.cookie('accessToken', token, { 
httpOnly: true, 
expires:token.expiresIn // Set expiration 
time 
}).status(200).json({success:true, 
token, 
data: { ...rest }, 
role, 
}); 
} catch (err) { 
res.status(500).json({ success: false, 
message: "Failed to login" }); 
} 
}; 
//booking Controller 
import Booking from '../models/Booking.js' 
//create new booking 
export const createBooking=async(req,res)=>{ 
const newBooking=new Booking(req.body) 
try{  
 
const savedBooking=await newBooking.save() 
res.status(200).json({success:true,message:"yo 
u'r trip is booked",data:savedBooking}) 
}catch(err){ 
res.status(500).json({success:false,message:"s 
erver error"}); 
} 
}; 
//get single booking 
export const getBooking=async(req,res)=>{ 
const id=req.params.id; 
try { 
const book=await Booking.findById(id) 
if (!book) { 
return res.status(404).json({ success: 
false, message: "Booking not found" }); 
} 
res.status(200).json({success:true,message:"su 
ccessful ",data:book}) 
} catch (err) { 
res.status(404).json({success:false,message:"n 
ot found"}); 
} 
}; 
//get all booking 
export const getAllBooking=async(req,res)=>{ 
try { 
const book=await Booking.find() 
res.status(200).json({success:true,message:"su 
ccessful ",data:book,}) 
} catch (err) { 
res.status(500).json({success:false,message:"i 
nternal server error"}); 
} 
}; 
//reviewController 
import Tour from "../models/Tour.js" 
import Review from "../models/Review.js" 
export const createReview =async(req,res)=>{ 
const tourId=req.params.tourId 
const newReview=new Review({...req.body}) 
try{  
 
const savedReview=await newReview.save() 
//after creating a new review now update the 
review array 
await Tour.findByIdAndUpdate(tourId,{ 
$push:{reviews:savedReview._id} 
}) 
res.status(200).json({success:true,message:"re 
view submited",data:savedReview}) 
}catch(err){ 
res.status(500).json({success:false,message:"f 
ailto submit",error:err.message}) 
} 
} 
//tourController 
import Tour from '../models/Tour.js' 
//create tour 
export const createTour=async(req,res)=>{ 
const newTour=new Tour(req.body) 
try { 
const savedTour=await newTour.save() 
res.status(200).json({success:true, 
message:"successfully created",data:savedTour}) 
} catch (error) { 
res.status(500).json({success:false, 
message:"failed try again"}); 
} 
} 
//update tour 
export const updateTour=async(req,res)=>{ 
const id=req.params.id 
try { 
const updatedTour=await 
Tour.findByIdAndUpdate(id,{ 
$set:req.body 
},{new:true}); 
res.status(200).json({success:true, 
message:"successfully updated",data:updatedTour}); 
} catch (err) { 
res.status(500).json({success:false, 
message:"fail to update"}); 
} 
}; 
//delete tour 
export const deleteTour=async(req,res)=>{ 
const id=req.params.id 
try { 
await Tour.findByIdAndDelete(id); 
res.status(200).json({success:true, 
message:"successfully deleted"}); 
} catch (err) { 
res.status(500).json({success:false, 
message:"fail to delete"}); 
} 
}; 
//getsingletour 
export const getSingleTour=async(req,res)=>{ 
const id=req.params.id 
try { 
const tour=await 
Tour.findById(id).populate("reviews"); 
// .populate("reviews"); 
res.status(200).json({success:true, 
message:"successfully ",data:tour}); 
} catch (err) { 
res.status(404).json({success:false, 
message:"not found"}); 
} 
}; 
//getall tour 
export const getAllTour=async(req,res)=>{ 
const page=parseInt(req.query.page) 
console.log(page); 
try { 
const tours=await 
Tour.find({}).populate("reviews").skip(page*8).limit(8 
) 
res.status(200).json({success:true, 
count:tours.length, 
message:"Successful", 
data:tours,}) 
} catch (err) { 
res.status(404).json({success:false, 
message:"not found"}); 
} 
}; 
//get tour by search 
export const getTourBySearch = async (req, res) => { 
const city = new RegExp(req.query.city, 'i'); // 
i=case insensitive 
const distance = parseInt(req.query.distance); 
const maxGroupSize = 
parseInt(req.query.maxGroupSize); 
try { 
// gte == greater than or equal to 
const tours = await Tour.find({ 
city, 
distance: { $gte: distance }, 
maxGroupSize: { $gte: maxGroupSize }, 
}).populate("reviews") 
// .populate("reviews"); 
res.status(200).json({ 
success: true, 
message: "Successful", 
data: tours, 
}); 
} catch (error) { 
console.error(error); // Log the error for 
debugging purposes 
res.status(404).json({ success: false, 
message: "Not found" }); 
} 
}; 
//get feature tour 
export const getFeaturetour=async(req,res)=>{ 
try { 
const tours=await 
Tour.find({featured:true}).populate("reviews").limit(8 
); 
// .populate("reviews") 
res.status(200).json({success:true,message:"Su 
ccessful",data:tours,}) 
} catch (err) { 
res.status(404).json({success:false, 
message:"not found"}); 
} 
}; 
//get tour count 
export const getTourCount= async(req,res)=>{ 
try { 
const tourCount=await 
Tour.estimatedDocumentCount(); 
res.status(200).json({success:true, 
data:tourCount}) 
} catch (err) { 
res.status(500).json({success:false,message:"f 
ail to fetch"}) 
} 
} 
//userController 
import User from "../models/User.js"; 
//create new User 
export const createUser=async(req,res)=>{ 
const newUser=new User(req.body) 
try{ 
const savedUser=await newUser.save() 
res.status(200).json({success:true, 
message:"successfully created",data:savedUser}) 
}catch(err){ 
res.status(500).json({success:false, 
message:"failed try again"}); 
} 
}; 
//update User 
export const updateUser=async(req,res)=>{ 
const id=req.params.id 
try { 
const updatedUser=await 
User.findByIdAndUpdate(id,{ 
$set:req.body 
},{new:true}) 
res.status(200).json({success:true, 
message:"successfully updated",data:updatedUser}); 
} catch (err) { 
res.status(500).json({success:false, 
message:"fail to update"}); 
} 
}; 
//delete User 
export const deleteUser=async(req,res)=>{ 
const id=req.params.id 
try { 
await User.findByIdAndDelete(id); 
res.status(200).json({success:true, 
message:"successfully deleted"}); 
} catch (err) { 
res.status(500).json({success:false, 
message:"fail to delete"}); 
} 
}; 
//getsingleUser 
export const getSingleUser=async(req,res)=>{ 
const id=req.params.id 
try { 
const user=await User.findById(id); 
res.status(200).json({success:true, 
message:"successfully ",data:user}); 
} catch (err) { 
res.status(404).json({success:false, 
message:"not found"}); 
} 
}; 
//getall User 
export const getAllUser=async(req,res)=>{ 
try { 
const users=await User.find({}) 
res.status(200).json({success:true, 
message:"Successful", 
data:users,}) 
} catch (err) { 
res.status(404).json({success:false, 
message:"not found"}); 
} 
}; 
//Models 
//Booking 
import mongoose from "mongoose"; 
const bookingSchema = new mongoose.Schema( 
{ 
userId: { 
type:String 
}, 
userEmail: { 
type: String, 
}, 
tourName:{ 
type:String, 
required:true 
}, 
fullName: { 
type: String, 
required: true, 
}, 
guestSize:{ 
type:Number, 
required:true 
}, 
phone:{ 
type:Number, 
required:true 
}, 
bookAt:{ 
type:Date, 
required:true 
}, 
}, 
{ timestamps: true } 
); 
export default mongoose.model("Booking", 
bookingSchema); 
//Review 
import mongoose from "mongoose"; 
const reviewSchema = new mongoose.Schema( 
{ 
productId: { 
type: mongoose.Types.ObjectId, 
ref: "Tour", 
}, 
username: { 
type: String, 
required: true, 
}, 
reviewText: { 
type: String, 
required: true, 
}, 
rating: { 
type: Number, 
required: true, 
min: 0, 
max: 5, 
default: 0, 
}, 
}, 
{ timestamps: true } 
); 
export default mongoose.model("Review", reviewSchema); 
//Tour 
import mongoose from "mongoose"; 
const tourSchema = new mongoose.Schema( 
{ 
title: { 
type: String, 
required: true, 
unique: true, 
}, 
city: { 
type: String, 
required: true, 
}, 
address: { 
type: String, 
required: true, 
}, 
distance: { 
type: Number, 
required: true, 
}, 
photo: { 
type: String, 
required: true, 
}, 
desc: { 
type: String, 
required: true, 
}, 
price: { 
type: Number, 
required: true, 
}, 
maxGroupSize: { 
type: Number, 
required: true, 
}, 
reviews: [ 
{ 
type: mongoose.Types.ObjectId, 
ref: "Review", 
}, 
], 
featured: { 
type: Boolean, 
default: false, 
}, 
}, 
{ timestamps: true } 
); 
export default mongoose.model("Tour", tourSchema); 
//User 
import mongoose from "mongoose"; 
const userSchema = new mongoose.Schema( 
{ 
username: { 
type: String, 
required: true, 
unique: true, 
}, 
email: { 
type: String, 
required: true, 
unique: true, 
}, 
password: { 
type: String, 
required: true, 
}, 
photo: { 
type: String, 
}, 
role: { 
type: String, 
default: "user", 
}, 
}, 
{ timestamps: true } 
); 
export default mongoose.model("User", userSchema); 
//Routes 
//auth.js 
import express from 'express' 
import { register ,login} from 
'../controls/authController.js'; 
const router =express.Router() 
router.post('/register',register); 
router.post('/login',login); 
export default router; 
//booking.js 
import express from 'express' 
import { verifyAdmin, verifyUser } from 
'../utils/verifyToken.js' 
import { createBooking, getAllBooking, getBooking } 
from '../controls/bookingController.js' 
const router =express.Router() 
router.post('/',verifyUser,createBooking) 
router.get('/:id',verifyUser,getBooking) 
router.get('/',verifyAdmin,getAllBooking) 
export default router; 
//reviews 
import express from 'express' 
import { createReview } from 
'../controls/reviewController.js'; 
import { verifyUser } from '../utils/verifyToken.js'; 
const router=express.Router(); 
router.post('/:tourId',verifyUser,createReview) 
export default router 
//tour 
import express from 'express' 
import { createTour, deleteTour, getAllTour, 
getFeaturetour, getSingleTour, getTourBySearch, 
getTourCount, updateTour } from 
'../controls/tourController.js' 
import { verifyAdmin } from '../utils/verifyToken.js'; 
const router=express.Router() 
//create new tour 
router.post('/',verifyAdmin,createTour); 
//create update new tour 
router.put('/:id',verifyAdmin,updateTour); 
//create delete tour 
router.delete('/:id',verifyAdmin,deleteTour); 
//create get single tour 
router.get('/:id',getSingleTour); 
//get all tour 
router.get('/',getAllTour); 
//get search tour 
router.get('/search/getTourBySearch',getTourBySearch); 
//get featured tour 
router.get('/search/getFeaturetour',getFeaturetour); 
router.get('/search/getTourCount',getTourCount); 
export default router 
//user 
import express from 'express' 
import { deleteUser, getAllUser, getSingleUser, 
updateUser } from '../controls/userController.js'; 
const router =express.Router(); 
import { verifyAdmin, verifyUser } from 
'../utils/verifyToken.js'; 
router.put('/:id',verifyUser,updateUser); 
//create delete user 
router.delete('/:id',verifyUser,deleteUser); 
//create get single user 
router.get('/:id',verifyUser,getSingleUser); 
//get all user 
router.get('/',verifyAdmin,getAllUser); 
export default router; 
//Utils 
//verifytokens 
import Jwt from "jsonwebtoken"; 
const verifyToken=(req,res,next)=>{ 
const token =req.cookies.accessToken 
if(!token){ 
return 
res.status(401).json({success:false,message:"you are 
not authorized"}) 
} 
//if token exists then verify 
Jwt.verify(token,process.env.JWT_SECRET_KEY,(err,u 
ser)=>{ 
if(err){ 
return 
res.status(401).json({success:false,message:"token is 
invalid"}) 
} 
req.user=user 
next() //dont forget to call next 
}) 
}; 
export const verifyUser=(req,res,next)=>{ 
verifyToken(req,res,next,()=>{ 
if(req.user.id===req.params.id || 
req.user.role==='admin'){ 
next() 
}else{ 
return 
res.status(401).json({success:false,message:"you are 
not authanticated"}) 
} 
}) 
}; 
export const verifyAdmin=(req,res,next)=>{ 
verifyToken(req,res,()=>{ 
if(req.user.role==="admin"){ 
next() 
}else{ 
return 
res.status(401).json({success:false,message:"you are 
not authorized"}) 
} 
}) 
} 
//.env 
PORT = 4000 
MONGO_URI=mongodb+srv://amar:XKSmrPPu47KX6d0I@cluster0 
.fhvsit6.mongodb.net/tours_booking? 
retryWrites=true&w=majority 
JWT_SECRET_KEY=kerjhghglkhgskjhlkjhuykyg 
//index.js 
import express from 'express' 
import dotenv from 'dotenv' 
import mongoose from 'mongoose' 
import cors from 'cors' 
import cookieParser from 'cookie-parser' 
import tourRouter from './routes/tour.js' 
import userRouter from './routes/users.js' 
import authRouter from './routes/auth.js' 
import reviewRouter from './routes/reviews.js' 
import bookingRouter from './routes/bookings.js' 
dotenv.config() 
const app=express(); 
const port=process.env.PORT || 8000; 
const corsOptions={ 
origin:true, 
credentials:true 
} 
//for testing 
app.get('/',function(req,res,next){ 
res.send("api is working"); 
}); 
//databaseconnection 
mongoose.set("strictQuery",false); 
const connect = async () => { 
try { 
await mongoose.connect(process.env.MONGO_URI,{ 
useNewUrlParser: true, useUnifiedTopology: 
true 
}); 
console.log("MongoDB database connected"); 
} catch (err) { 
console.error("MongoDB connection failed:", 
err.message); 
} 
}; 
//middleware 
app.use(express.json()) 
app.use(cors(corsOptions)) 
app.use(cookieParser()) 
app.use('/api/v1/tour',tourRouter) 
app.use('/api/v1/user',userRouter) 
app.use('/api/v1/auth',authRouter) 
app.use('/api/v1/review',reviewRouter) 
app.use('/api/v1/booking',bookingRouter) 
app.listen(port,()=>{ 
connect(); 
console.log('server is runing on',port); 
}) 
